-*- mode: outline; outline-regexp: " *- " -*-

- Unit: Getting started with Javascript (7 weeks)

  - Intro to Intro (1)

    - Introductions

      - Me to you

        - First year teaching.

        - Have been a programmer since 1995.

        - Self taught. Studied English in college.

        - Most recently worked for nearly four years at Twitter and then four
          years running the engineering team at the Democratic National
          Committee in the runup to the 2020 election.

        - I've written a couple books about programming.

      - You to me. Index card with:

        - Preferred name and on one side in big letters. Also your pronouns if you would like.

        - Answers to questions on the board on the other side.

          - Why are you taking this class?

          - What do hope to learn?

          - Do you have any prior experience programming? If so describe briefly.

        - When you're done, put the card name side up on your desk.

    - Class policies

      - No phones out during class. First-come, first-served access to the ten
        slot Phone Spa. All other phones must stay in pocket or bag during class
        or will be taken and not charged.

      - No games and no social media. Computer is for doing work and research
        related to your work.

      - Grades:

        - Portfolio (~40%)

          - The collection of all the code you wrote over the year.

          - You will have an opportunity at the end of the year to go back and
            work on earlier projects

          - You will also get to pick a small number of programs as the best
            representation of your work.

        - Journal (~40%)

          - Daily journal of what you worked on, what problems you ran into, and
            how you got unstuck.

        - Collaboration and diligence (~20%)

          - Being on task

          - Being a helpful to your peers when working together

          - Not being disruptive to others

      - Homework:

        - Very little. Maybe sometimes some reading or watching a brief video.
          You can work on your programs outside of class but it should not be
          necessary.

      - Recurse Center rules. https://www.recurse.com/social-rules

      - Coding, open source, and working together:

        - Write your own code. (When working in groups, group will turn in the same code.)

        - If you find useful snippets of code on the internet, cite it in a comment.

      - No food near computers.

      - Masks: encouraged and I will enforce school policies.

    - What we're going to learn

      - Programming

        - Think of it like learning a language

        - But also a form of problem solving

        - Just as important, picking the problems to solve

      - Javascript

        - The language of the web

        - Used for a lot more than that these days.

      - Why Javascript?

        - It’s incredibly popular and widely used.

        - It’s a real language. Thus it has warts and oddities.

        - Underneath, especially these days, it’s also a pretty clean language.

    - Set up

      - Log into https://help.gigamonkeys.com with student Google account.

      - Getting set up on Github.

      - Getting logged into Intro to Programming with your Github account.

      - What is a REPL https://intro.gigamonkeys.com/demo/repl/

  - What is programming? (1)

    - What can we do with computers?

      - Count stuff, i.e. Math

      - Text

      - Graphics

      - Video

      - Games

      - Communicate (with text, graphics, video, etc.)

      - What else?

    - What is programming?

      - Why is it fun?

        - If you like creating things

        - If you like solving puzzles

        - If you like learning and understanding how things work

      - Why is it hard?

        - There are a lot of details that you have to get right.

        - It is very abstract.

        - Those two things are usually at the opposite end of the mental spectrum.

      - What can you do when you know how to program?

        - Understand, at least a bit, how all this stuff around us works?

        - Build tools to make your life better.

      - If you're not stuck, you're not programming.

        - Expect to be stuck

        - When you get unstuck is when you learn the most

    - Some themes

      - Classic How to Solve It cycle:

        - Understand the problem.

        - Devise a plan.

        - Carry out the plan.

        - Examine the solution and think about how it could be better.

      - Breaking down problems into smaller problems

      - Debugging

      - Abstraction

      - Writing clear code

    - Let's write a program

      - Getting set up on Github and on ItP site if not already.

      - What is a REPL https://intro.gigamonkeys.com/demo/repl/

      - Bouncing ball: https://intro.gigamonkeys.com/assignments/bouncing-ball/

  - Numbers (2)

    - First: what is data?

      - What can we do with it?

        - Store it

        - Send and receive it

        - Render it: play a video, display text, etc.

        - Combine and transform it to make new data

      - What is a data type?

        - A set of possible values

        - Syntax - how you write it

        - Operators - what you can do with it

        - Expressions - combinations of values and operators

    - Numbers

      - Possible values

      - Syntax

      - Operators: +, -, *, /, %, **

  - Booleans (2)

    - Possible values

    - Syntax

    - Operators: &&, ||, !

    - Some operators between types

      - Equality: ===, !==

      - Comparison: <, >, <=, >=,

    - Boolean bingo

  - Strings (2)

    - Possible values

    - Syntax

    - Operators: +, []

  - Variables (1)

    - named values

      - const

    - The difference between variables and values.

  - Expression wrap up (1)

  - Functions

    - defining & using (1)

    - numeric, boolean, and string (2)

      - Various math functions: area of circle, volume of sphere, quadratic equation.

      - Random logical expressions like sleep_in

      - Combining strings

      - Extracting characters from strings.

    - composing (2)

      - Breaking down big functions into smaller ones

      - Building up big functions by writing pieces first.

      - Writing big functions by assuming other functions which you then write.

      - A little recursion, as a treat.

  - Project: Writing functions with numbers, booleans, and strings (4)

  - Variables (1)

    - Binding vs assignment

    - Function parameters

    - Constant

      - Names for values

      - Used to simplify expressions

    - Changing

      - Names that can change

    - Scope of variables.

  - Control constructs (2)

    - if

    - return

    - while

    - for

    - break

  - More about strings (2)

    - length property

    - substring() method

  - Arrays

    - Values and syntax (1)

      - Indexing (1)

        - Zero based

        - .length property

        - Up to .length - 1

    - Looping over arrays (1)

    - Search (1)

      - Use of while loops (while (!found) { lookForThing

    - filter/map/reduce patterns (2)

      - count item

      - min

      - max

      - select vowels

      - select not vowels

      - select even indices

      - collect pairs (hmmm, this is hard to do with f/m/r functions)

      - count predicate, e.g. vowels

      - bowling score from number of pins per frame.

  - Divide and conquer (1)

  - Project: Caesar Cipher (4)

    - Preliminaries

      - ASCII and Unicode

      - s.charCodeAt(i)

      - String.fromCharCode(code)

      - Modular arithmetic.

      - console.log debugging

    - Function that handles a single character rotation.

    - Function that handles a string of only lowercase letters.

    - Add support for uppercase latters.

    - Allow non-letter characters which are passed through unchanged.

    - Write encrypt/decrypt function that work off the same key.

    - Use a string key rather than a single number where each key letter is added to the plaintext letter, cycling.

    - Any other enhancements to encoding, decoding. (Must be roundtrip.)

    - Write a function that cracks simple caesar ciphers by brute force. (How to tell when you've got a crack?)

      - Assume perhaps you have a list of the 1000 most common words in English.

      - One approach: decrypt the ciphertext with each key and check for words

      - Another approach: encrypt the top words with each key and check for the ciphertext version in the given ciphertext

- Unit: Graphics (4 weeks)

  - What is an API and reading documentation (1)

    - Properties

    - Methods

    - Reading docs at MDN

    - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D

  - Project: Make some art (4)

    - Explore the MDN docs for Canvas and 2D context and experiment with different methods and properties.

    - Journal about what you find.

    - Turn in various graphics.

  - Building an animation loop (1)

    - How an animation loop works

    - Setting up a simple loop in Javascript with requestAnimationFrame

  - Project: Animation (3)

  - Conway's Game of Life (1)

    - 2D arrays

    - Nested loops.

  - Project: Game of Life (4)

  - Randomness and variation (1)

  - Project: Generative art (3)

- Unit: The Web (3 weeks)

  - HTML Basics (1)

  - Project: HTML document (4)

  - CSS: make it pretty (1)

  - Project: Pretty document (3)

  - Dynamic HTML (1)

    - Buliding and styling HTML with code

    - Responding to events

    - Closures

  - Project: Dynamic document (4)

- Unit: Genetic algorithms (3 weeks)

  - Objects & Genetic algorithms (1)

  - Project: Phrase Matcher (4)

  - More complex GA (1)

  - Project: Image Matcher (9)

- Unit: Text (3 weeks)

  - Advanced string manipulation including regular expressions. (4)

    - How text is represented in the computer.

  - Project: Text manipulation tools (5)

    - See https://nimbletext.com/howto/ManipulateText for ideas.

    - Maybe some Advent of Code style puzzles?

    - Count lines

    - Word count

    - Word frequency

    - Find lines matching

    - Name generator

    - Smart quotes

  - Markov models (1)

  - Project: Markov model (3)

- Unit: Search (4 weeks)

  - Recursion (5)

    - Fibonacci

    - Change counting

    - Towers of Hanoi

  - Depth-first and Breadth-first search (1)

  - Project: Maze solver (4)

    - https://en.wikipedia.org/wiki/Maze-solving_algorithm#Recursive_algorithm

  - Game search (1)

  - Project: Board games (4)

    - Nim

    - Tic Tac Toe

    - Connect 4

    - Gomoku

  - Search with constraints (1)

  - Project: Sudoku Solver (3)

- Unit: Simulation (6 weeks)

  - Chatbot basics (1)

    - Eliza

    - AIML (https://en.wikipedia.org/wiki/AIML)

   - Data driven programming

  - Project: Chatbot (8)

  - Simulating physics (1)

  - Project: Boucing balls, billiards, and balistics. (9)

    - Bouncing balls

    - Billiards table

    - Rocket in space

  - Artifical life (1)

  - Project: Boids, Ants, and Slime (9)

- Unit: Portfolio development (8 weeks)

  - Classes (5)

  - Project: Video Game (10)

  - Higher order functions (5)

  - Project: Adventure (9)

- Extra

  - Topics

    - Debugging

    - Testing

    - Typescript

  - Projects

    - Encode your name

    - Monte Carlo Simulation

    - Wordle

    - 2048

    - Boggle

    - Hangman

    - SEND + MORE = MONEY

    - Zebra problem
