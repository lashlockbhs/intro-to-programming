-*- mode: markup; -*-

* Numbers

Our first data type!

** Three ways of looking at numbers

## fragments

(And every other data type.)

##.

** _none

## fragments

  # What values can be represented.

  # What the syntax is for writing them in our langauge.

  # What we can do with them.

##.

** What values can be represented?

## fragments

Numbers are infinite.

Computers are finite.

What to do?

##.

** Like many things in computers, we compromise

## fragments

Javascript uses a format that is well supported by modern computers, called
binary floating point.

Basically scientific notation for computers.

##.

** Good general purpose format

## fragments

It can represent integer values from -2\sup{53} to 2\sup{53}
(-9,007,199,254,740,992 to 9,007,199,254,740,992)

It can represent decimal values and very large numbers with approximately 15
decimal digits of precision.

It can also represent very small numbers near zero with greater precision.

##.

** What does this mean for us?

## fragments

We don‚Äôt really have to worry about it. üéâ

(Most of the time.) ü§®

##.


* How do we write numbers?

** `0`

** `1`

** `2`

** `3`

** `1000000000`

** `1_000_000_000`

** `9_007_199_254_740_992`

## fragments

Nine quadrillion seven trillion one hundred ninety-nine billion two hundred
fifty-four million seven hundred forty thousand nine hundred ninety-two

##.

** `-1`

** `-2`

** `0.0`

** `1.2`

** `-0.5`

** `1.4142135623730951`

## fragments

(Best approximation of the square root of 2)

##.


** `2.718281828459045`

## fragments

(Best approximation of \em{e})

##.

** `3.141592653589793`

## fragments

(Best approximation of œÄ)

##.

** `1.7976931348623157e+308`

## fragments

(Biggest number we can represent.)

##.

** `1.7976931348623155e+308`

## fragments

(The \em{second} biggest number we can represent.)

The gap between it and the biggest is `1.99584030953472e+292`

##.


** `2.220446049250313e-16`

** `5e-324`

** `Infinity`

** `NaN`

** What can we do with numbers?

## fragments

Math, mostly.

##.

** What does it even mean to \em{do} things with numbers?

** _none

A lot of programming is about combining smaller pieces into bigger pieces.

** Expressions

## fragments

Expressions are a way of combining values (like numbers) with \em{operators} to
produce new values.

The exact operators depend on the types of the values.

##.

** Some operators on numbers

## fragments

`+`

`-`

`*`

`/`

`%`

`**`

##.

** 1 + 2 ‚üπ 3

** 10 - 6 ‚üπ 4

** 5 * 10 ‚üπ 50

** 50 / 10 ‚üπ 5

** 1 / 3 ‚üπ 0.3333333333333333

## fragments

Note, this is an approximation.

##.

** 0.1 + 0.5 ‚üπ 0.6

** 0.1 + 0.2 ‚üπ 0.30000000000000004

## fragments

wtf?!

##.

** 23 % 12 ‚üπ 11

** 52 % 7 ‚üπ 3

** 2 ** 8 ‚üπ 256

** 2 ** 55 ‚üπ 36028797018963970

## fragments

Uh, oh. That‚Äôs not right. üí©

Should be `36028797018963968`

Would be better as `3.602879701896397e16`

##.

** 2**70 ‚üπ 1.1805916207174113e+21

** 1 + 2 * 3 ‚üπ 7

** (1 + 2) * 3 ‚üπ 9

* Wrapping up

** Two kinds of values

## fragments

Individual numbers are values.

Expressions combine numbers to produce new values.

##.

** The same value can be written different ways

## fragments

`12345`

`12_345`

`12345.00`

`1.2345e4`

##.

** Different expressions can have the same value

## fragments

`1`

`43 / 43`

`(108 - (2 ** 3)) * 0.01`

##.

** _none

We‚Äôll talk more later about what you can do with values.
